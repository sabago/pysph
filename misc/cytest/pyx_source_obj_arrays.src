################################################################################
# `CLASSNAME` class.
################################################################################
cdef class CLASSNAME:
    #cdef public int length, alloc
    #cdef OBJ_TYPE *data
    #cdef np.ndarray _npy_array

    def __cinit__(self, int n):
        """
        Constructor.
        """
        self.length = n
        if n == 0:
            n = 16
        self.alloc = n
        self.data = <OBJ_TYPE*>malloc(n*sizeof(OBJ_TYPE))
        
    def __dealloc__(self):
        """
        Frees the array.
        """
        free(<void*>self.data)
    
    def __getitem__(self, int idx):
        """
        Get item at position idx.
        """
        return self.data[idx]

    def __setitem__(self, int idx, OBJ_TYPE value):
        """
        Set location idx to value.
        """
        self.data[idx] = value

    cdef _setup_npy_array(self):
        """
        Create the numpy array.
        """
        cdef int nd = 1
        cdef int *dims = [self.length]

        self._npy_array = PyArray_SimpleNewFromData(nd, dims, NUMPY_TYPENAME, self.data)

    cdef OBJ_TYPE* get_data_ptr(self):
        """
        Return the internal data pointer.
        """
        return self.data

    cpdef set_data(self, np.ndarray nparr):
        """
        Set data from the given numpy array.

        If the numpy array is a reference to the numpy array maintained
        internally by this class, nothing is done. 
        Otherwise, if the size of nparr matches this array, values are
        copied into the array maintained.

        """
        cdef PyArrayObject* sarr = <PyArrayObject*>nparr
        cdef PyArrayObject* darr = <PyArrayObject*>self._npy_array

        if self._npy_array is nparr:
            return
        if sarr.dimensions[0] == darr.dimensions[0]:
            self._npy_array[:] = nparr
        else:
            raise ValueError
            
    cpdef OBJ_TYPE get(self, int idx):
        """
        Gets value stored at position idx.
        """
        return self.data[idx]

    cpdef set(self, int idx, OBJ_TYPE value):
        """
        Sets location idx to value.
        """
        self.data[idx] = value
    
    cpdef append(self, OBJ_TYPE value):
        """
        Appends value to the end of the array.
        """
        cdef int l = self.length
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array

        if l >= self.alloc:
            self.reserve(l*2)
        self.data[l] = value
        self.length += 1

        # update the numpy arrays length
        arr.dimensions[0] = self.length

    cpdef reserve(self, int size):
        """
        Resizes the internal data to size*sizeof(OBJ_TYPE) bytes.
        """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array
        cdef void* data = NULL
        if size > self.alloc:
            data = <OBJ_TYPE*>realloc(self.data, size*sizeof(OBJ_TYPE))

            if data == NULL:
                free(<void*>self.data)
                raise MemoryError

            self.data = <OBJ_TYPE*>data
            self.alloc = size
            arr.data = <char *>self.data
            
    cpdef resize(self, int size):
        """
 	Resizes internal data to size*sizeof(OBJ_TYPE) bytes and sets the
        length to the new size.
        
        """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array

        # reserve memory
        self.reserve(size)

        # update the lengths
        self.length = size
        arr.dimensions[0] = self.length

    cpdef squeeze(self):
        """
        Release any unused memory.
        """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array
        cdef void* data = NULL
        data = <OBJ_TYPE*>realloc(self.data, self.length*sizeof(OBJ_TYPE))
        
        if data == NULL:
            # free original data
            free(<void*>self.data)
            raise MemoryError
        
        self.data = <OBJ_TYPE*>data
        self.alloc = self.length
        arr.data = <char *>self.data
        
    cpdef np.ndarray get_npy_array(self):
        """
	Return the numpy array.
	"""
        return self._npy_array
