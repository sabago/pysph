################################################################################
# `CLASSNAME` class.
################################################################################
cdef class CLASSNAME(BaseArray):
    """Represents an array of integers. """
    
    #Superclass data attributes.
    #length, alloc, _npp_array
    
    #Defined in the .pxd file
    #cdef int *data
    #cdef public int minimum, maximum

    def __cinit__(self, int n=0, *args, **kwargs):
        """ Constructor for the class. 

        Mallocs a memory buffer of size (n*sizeof(int)) and sets up
        the Numpy array.
        
        Parameters:
        -----------
        n -- Length of the array.
        
        Data attributes:
        ----------------
        data -- Pointer to an integer array.
        alloc -- Size of the data buffer allocated.

        """
        self.length = n
        if n == 0:
            n = 16
        self.alloc = n
        self.data = <ARRAY_TYPE*>malloc(n*sizeof(ARRAY_TYPE))
        
        self._setup_npy_array()
	 
    ########################################################################
    #Public interface
    ########################################################################
    cpdef str get_c_type(self):
        """ Return a string representation for the data type. """
        return 'ARRAY_TYPE'

    cdef ARRAY_TYPE* get_data_ptr(self):
        """ Return the internal data pointer. """
        return self.data
            
    cpdef ARRAY_TYPE get(self, int idx):
        """ Return value at index `idx`."""
        return self.data[idx]

    cpdef set(self, int idx, ARRAY_TYPE value):
        """ Set value at index `idx` to `value`. """
        self.data[idx] = value
    
    cpdef append(self, ARRAY_TYPE value):
        """ Append a value to the `data` attribute of the class.
        
        When called once, the function will resize `data` to twice
        it's original length. This avoids frequent resizing of data 
        buffer.

        """
        cdef int l = self.length
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array

        if l >= self.alloc:
            self.reserve(l*2)
        self.data[l] = value
        self.length += 1

        # update the numpy arrays length
        arr.dimensions[0] = self.length

    cpdef reserve(self, int size):
        """ Create reserve memory for the data buffer.

        Parameters:
        -----------
        size -- The ize of the data buffer: size*sizeof(int) bytes.

        """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array
        cdef void* data = NULL
        if size > self.alloc:
            data = <ARRAY_TYPE*>realloc(self.data, size*sizeof(ARRAY_TYPE))

            if data == NULL:
                free(<void*>self.data)
                raise MemoryError

            self.data = <ARRAY_TYPE*>data
            self.alloc = size
            arr.data = <char *>self.data
            
    cpdef resize(self, int size):
        """ Resize the internal data buffer. """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array

        # reserve memory
        self.reserve(size)

        # update the lengths
        self.length = size
        arr.dimensions[0] = self.length

    cpdef squeeze(self):
        """ Release any unused memory. """
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array
        cdef void* data = NULL
        data = <ARRAY_TYPE*>realloc(self.data, self.length*sizeof(ARRAY_TYPE))
        
        if data == NULL:
            # free original data
            free(<void*>self.data)
            raise MemoryError
        
        self.data = <ARRAY_TYPE*>data
        self.alloc = self.length
        arr.data = <char *>self.data
        
    cpdef remove(self, np.ndarray index_list, int input_sorted=0):
        """ Remove an indexd list of values.

        Parameters:
        -----------
        index_list -- a list of indices which should be removed.
        input_sorted -- Is the list sorted or not.

        **Algorithm**
         
        Reverse sort the index list.
        For each index in this reversed sorted list, set the data value 
        to the last element in the data buffer.
        Update the length of the data buffer and Numpy array.
        
        """
        cdef int i
        cdef int inlength = index_list.size
        cdef np.ndarray sorted_indices
        cdef long id
        cdef PyArrayObject* arr = <PyArrayObject*>self._npy_array
        
        if inlength > self.length:
            return

        if input_sorted != 1:
            sorted_indices = np.sort(index_list)
        else:
            sorted_indices = index_list
        
        for i in range(inlength):
            id = sorted_indices[inlength-(i+1)]
            if id < self.length:
                self.data[id] = self.data[self.length-1]
                self.length = self.length - 1
                arr.dimensions[0] = self.length

    cpdef extend(self, np.ndarray in_array):
        """ Extend the data buffer.
        
        Parameters:
        -----------
        in_array -- The input Numpy array to extend with.
        
        This function calls the append function defined earlier.

        Issues:
        -------         
        accessing the in_array using the indexing operation seems to be 
        costly. Look at the annotated cython html file.

        """
        cdef int len = in_array.size
        cdef int i
        for i in range(len):
            self.append(in_array[i])

    cpdef copy_values(self, LongArray indices, BaseArray dest):
        """ Copy an indexed set of values to a destination array.

        Note:
        -----
	No size check if performed, we assume the dest to of proper size
        i.e. atleast as long as indices.

        """
        cdef CLASSNAME dest_array = <CLASSNAME>dest
        cdef int i, num_values
        num_values = indices.length
        
        for i from 0 <= i < num_values:
            dest_array.data[i] = self.data[indices.data[i]]

    cpdef copy_subset(self, BaseArray source, long start_index=-1,
                      long end_index=-1):
        """
        Copy a subset of values from src to self.

        **Parameters**
        
            - start_index - the first index in dest that corresponds to the 0th
            index in source.
            - end_index   - the last index in dest that corresponds to the last
            index in source.

        """
        cdef int si, ei, s_length, d_length, i, j
        cdef CLASSNAME src = <CLASSNAME>source
        s_length = src.length
        d_length = self.length

        if end_index < 0:
            if start_index < 0:
                if s_length != d_length:
                    msg = 'Source length should be same as dest length'
                    logger.error(msg)
                    raise ValueError, msg
                si = 0
                ei = self.length - 1
            else:
                # meaning we copy from the specified start index to the end of
                # self. make sure the sizes are consistent.
                si = start_index
                ei = d_length-1

                if start_index > (d_length-1):
                    msg = 'start_index beyond array length'
                    logger.error(msg)
                    raise ValueError, msg

                if (ei - si + 1) > s_length:
                    msg = 'Not enough values in source'
                    logger.error(msg)
                    raise ValueError, msg
        else:
            if start_index < 0:
                msg = 'start_index : %d, end_index : %d'%(start_index,
                                                          end_index)
                logger.error(msg)
                raise ValueError, msg
            else:
                if (start_index > (d_length-1) or end_index > (d_length-1) or
                    start_index > end_index):
                    msg = 'start_index : %d, end_index : %d'%(start_index,
                                                              end_index)
                    logger.error(msg)
                    raise ValueError, msg

                si = start_index
                ei = end_index

        # we have valid start and end indices now. can start copying now.
        j = 0
        for i from si <= i <= ei:
            self.data[i] = src.data[j]
            j += 1

    cpdef update_min_max(self):
        """ Calculate the min and max values for the data buffer. """
        cdef int i = 0
        cdef ARRAY_TYPE min_val, max_val
        
        if self.length == 0:
            self.minimum = <ARRAY_TYPE>-1e20
            self.maximum = <ARRAY_TYPE>1e20
            return

        min_val = self.data[0]
        max_val = self.data[0]

        for i from 0 <= i < self.length:
            if min_val > self.data[i]:
                min_val = self.data[i]
            if max_val < self.data[i]:
                max_val = self.data[i]
        
        self.minimum = min_val
        self.maximum = max_val 

    ########################################################################
    #Private interface
    ########################################################################
    def __dealloc__(self):
        """ Frees the array. """
        free(<void*>self.data)
    
    def __getitem__(self, int idx):
       """ Return data value at index `idx`."""
       return self.data[idx]

    def __setitem__(self, int idx, ARRAY_TYPE value):
        """ Set data value at index `idx` to `value`. """
        self.data[idx] = value

    def __reduce__(self):
        """ Implemented to facilitate pickling. """
        d = {}
        d['data'] = self.get_npy_array()
	
        return (CLASSNAME, (), d)

    def __setstate__(self, d):
        """ Load the carray from the dictionary d. """
        cdef np.ndarray arr = d['data']
        self.resize(arr.size)
        self.set_data(arr)

    cdef _setup_npy_array(self):
        """ Create the numpy array from the data.
        
        Notes:
        ------
        The number of dimensions is set to 1.        
        
        """
        cdef int nd = 1
        cdef np.npy_intp dims = self.length

        self._npy_array = PyArray_SimpleNewFromData(nd, &dims, 
                                                    NUMPY_TYPENAME, self.data)

    
    cdef void _align_array(self, LongArray new_indices):
        """ Realign the data buffer according to the indices.

        Parameters:
        -----------
        new_indices -- The new alignment array.

	"""
        if new_indices.length != self.length:
            raise ValueError, 'Unequal array lengths'
	
        cdef int i
        cdef int length = self.length
        cdef int n_bytes
        cdef ARRAY_TYPE *temp
        
        n_bytes = sizeof(ARRAY_TYPE)*length
        temp = <ARRAY_TYPE*>malloc(n_bytes)

        memcpy(<void*>temp, <void*>self.data, n_bytes)

        # copy the data from the resized portion to the actual positions.
        for i from 0 <= i < length:
            if i != new_indices.data[i]:
                self.data[i] = temp[new_indices.data[i]]
        
        free(<void*>temp)


