<?py
import datetime
now = datetime.datetime.now()
template_strs = ['CLASSNAME','ARRAY_TYPE','NUMPY_TYPENAME']
template_type_str = 'ARRAY_TYPE'
c_types_info = {'int':['IntArray', "int_array", "NPY_INT",[]],
                'double':['DoubleArray', "double_array", "NPY_DOUBLE",[]],
                'long':['LongArray', "long_array", "NPY_LONG",[]],#
                'float':['FloatArray', "float_array", "NPY_FLOAT",[]]#
                }
?># This file (carray.pxd) has been generated automatically on
# <?py= now.strftime('%c') ?>
# DO NOT modify this file
# To make changes modify the source templates (carray_pxd.src) and regenerate
"""
Implementation of arrays of different types in Cython.

Declaration File.

"""

# numpy import
cimport numpy as np

# forward declaration
cdef class BaseArray
cdef class LongArray(BaseArray)

cdef class BaseArray:
    """
    Base class for managed C-arrays.
    """
    cdef public long length, alloc
    cdef np.ndarray _npy_array

    cpdef reserve(self, long size)
    cpdef resize(self, long size)
    cpdef np.ndarray get_npy_array(self)
    cpdef set_data(self, np.ndarray)
    cpdef squeeze(self)
    cpdef remove(self, np.ndarray index_list, bint input_sorted=*)
    cpdef extend(self, np.ndarray in_array)
    cpdef reset(self)

    cpdef align_array(self, LongArray new_indices)
    cdef void _align_array(self, LongArray new_indices)
    cpdef str get_c_type(self)
    cpdef copy_values(self, LongArray indices, BaseArray dest)
    cpdef copy_subset(self, BaseArray source, long start_index=*, long end_index=*)
    cpdef update_min_max(self)

<?py
pxd_code_str = '''
################################################################################
# `CLASSNAME` class.
################################################################################
cdef class CLASSNAME(BaseArray):
    """This class defines a managed array of ARRAY_TYPEs. """
    cdef ARRAY_TYPE *data
    cdef public ARRAY_TYPE minimum, maximum

    cdef _setup_npy_array(self)
    cdef ARRAY_TYPE* get_data_ptr(self)

    cpdef ARRAY_TYPE get(self, long idx)
    cpdef set(self, long idx, ARRAY_TYPE value)
    cpdef append(self, ARRAY_TYPE value)
    cpdef reserve(self, long size)
    cpdef resize(self, long size)
    cpdef np.ndarray get_npy_array(self)
    cpdef set_data(self, np.ndarray)
    cpdef squeeze(self)
    cpdef remove(self, np.ndarray index_list, bint input_sorted=*)
    cpdef extend(self, np.ndarray in_array)
    cpdef reset(self)

    cdef void _align_array(self, LongArray new_indices)

'''

for ctype,info in c_types_info.items():
    code = pxd_code_str
    code = code.replace(template_strs[0], info[0])
    code = code.replace(template_type_str, ctype)
    code = code.replace(template_strs[2], info[2])
    out.write(code)

?>

